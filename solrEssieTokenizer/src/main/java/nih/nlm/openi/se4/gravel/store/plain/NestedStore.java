//--------------------------------------------------------------------------------------------------------
// NestedStore.java
//--------------------------------------------------------------------------------------------------------

package gravel.store.plain;

import java.io.*;

import gravel.store.*;
import gravel.utils.*;

//--------------------------------------------------------------------------------------------------------
// NestedStore
//--------------------------------------------------------------------------------------------------------

public abstract class NestedStore implements StoreInterface {

//--------------------------------------------------------------------------------------------------------
// NestedStore member vars
//--------------------------------------------------------------------------------------------------------

  private StoreInterface    mInnerStore;
  
//--------------------------------------------------------------------------------------------------------
// NestedStore - create
//--------------------------------------------------------------------------------------------------------

  public NestedStore(StoreInterface inInnerStore) {
    mInnerStore=inInnerStore;
  }

//--------------------------------------------------------------------------------------------------------
// close
//--------------------------------------------------------------------------------------------------------
  
  public void close() {
    StoreInterface theInnerStore=mInnerStore;
    mInnerStore=null;
    if (theInnerStore!=null) 
      theInnerStore.close();
  }

//--------------------------------------------------------------------------------------------------------
// deleteStore
//--------------------------------------------------------------------------------------------------------

  public static void deleteStore(String inFilename) { 
    try {
      FileUtils.deleteFile(inFilename); 
    } catch (IOException e) {
      throw new StoreException("Could not delete store "+inFilename,e);
    }
  }

//--------------------------------------------------------------------------------------------------------
// getIsClosed
//--------------------------------------------------------------------------------------------------------

  public boolean getIsClosed() { return (mInnerStore==null); }

//--------------------------------------------------------------------------------------------------------
// getInnerStore
//--------------------------------------------------------------------------------------------------------

  protected StoreInterface getInnerStore() { 
    if ((kRangeChecking)&&(getIsClosed()))
      throw new StoreException("Store closed");
    return mInnerStore; 
  }

//--------------------------------------------------------------------------------------------------------
// unwrap
//--------------------------------------------------------------------------------------------------------

  protected StoreInterface unwrap() { 
    StoreInterface theInnerStore=getInnerStore();
    mInnerStore=null; 
    close();
    return theInnerStore;
  }

//--------------------------------------------------------------------------------------------------------
// getSize
//--------------------------------------------------------------------------------------------------------

  public long getSize() { 
    long theSize=getInnerStore().getSize(); 
    if ((kRangeChecking)&&(theSize<0))
      throw new StoreException("Negative Size: "+theSize);
    return theSize; 
  }

//--------------------------------------------------------------------------------------------------------
// getCapacity
//--------------------------------------------------------------------------------------------------------

  public long getCapacity() { 
    long theCapacity=getInnerStore().getCapacity(); 
    if ((kRangeChecking)&&(theCapacity<0))
      throw new StoreException("Negative Capacity: "+theCapacity);
    return theCapacity; 
  }

//--------------------------------------------------------------------------------------------------------
// getContentMemory
//--------------------------------------------------------------------------------------------------------

  public long getContentMemory() { return getInnerStore().getContentMemory(); }

//--------------------------------------------------------------------------------------------------------
// getMemory
//--------------------------------------------------------------------------------------------------------

  public long getMemory() { 
    return Allocate.getObjectMemory(kReferenceMemory)+getInnerStore().getMemory(); }

//--------------------------------------------------------------------------------------------------------
// getNParams
//--------------------------------------------------------------------------------------------------------

  public int getNParams() { return  getInnerStore().getNParams(); }

//--------------------------------------------------------------------------------------------------------
// getParam
//--------------------------------------------------------------------------------------------------------

  public long getParam(int inIndex) { return getInnerStore().getParam(inIndex); }

//--------------------------------------------------------------------------------------------------------
// getParams
//--------------------------------------------------------------------------------------------------------

  public long[] getParams() { return getInnerStore().getParams(); }

//--------------------------------------------------------------------------------------------------------
// setSize
//--------------------------------------------------------------------------------------------------------

  public void setSize(long inSize) { getInnerStore().setSize(inSize); }

//--------------------------------------------------------------------------------------------------------
// clear
//--------------------------------------------------------------------------------------------------------

  public void clear() { getInnerStore().clear(); }

//--------------------------------------------------------------------------------------------------------
// truncateBy
//--------------------------------------------------------------------------------------------------------

  public void truncateBy(long inNValues) { setSize(getSize()-inNValues); }

//--------------------------------------------------------------------------------------------------------
// setCapacity
//--------------------------------------------------------------------------------------------------------

  public void setCapacity(long inCapacity) { getInnerStore().setCapacity(inCapacity); }

//--------------------------------------------------------------------------------------------------------
// ensureCapacity
//--------------------------------------------------------------------------------------------------------

  public void ensureCapacity(long inSize) { getInnerStore().ensureCapacity(inSize); }

//--------------------------------------------------------------------------------------------------------
// compact
//--------------------------------------------------------------------------------------------------------

  public void compact() { getInnerStore().compact(); }

//--------------------------------------------------------------------------------------------------------
// setNParams
//--------------------------------------------------------------------------------------------------------

  public void setNParams(int inNParams) { getInnerStore().setNParams(inNParams); }

//--------------------------------------------------------------------------------------------------------
// setParam
//--------------------------------------------------------------------------------------------------------

  public void setParam(int inIndex, long inParam) { getInnerStore().setParam(inIndex,inParam); }

//--------------------------------------------------------------------------------------------------------
// setParams
//--------------------------------------------------------------------------------------------------------

  public void setParams(long[] inParams) { getInnerStore().setParams(inParams); }

//--------------------------------------------------------------------------------------------------------
// getHash
//--------------------------------------------------------------------------------------------------------

  public long getHash(long inIndex) { return getInnerStore().getHash(inIndex); }

}

